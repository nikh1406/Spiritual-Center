// <auto-generated />
using System;
using Backend.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(SpiritualCentreContext))]
    partial class SpiritualCentreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Backend.DTO.GetPaymentDetailDTO", b =>
                {
                    b.Property<double>("Amount")
                        .HasColumnType("float")
                        .HasColumnName("Amount");

                    b.Property<string>("DevoteeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DevoteeID");

                    b.Property<int>("Month")
                        .HasColumnType("int")
                        .HasColumnName("Month");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("Year");

                    b.ToTable("getPaymentDetailDTO");
                });

            modelBuilder.Entity("Backend.DTO.GetUnpaidDetailDTO", b =>
                {
                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AREA");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CITY");

                    b.Property<string>("DevoteeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DevoteeID");

                    b.Property<string>("Emailid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EMAILID");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FIRST_NAME");

                    b.Property<int>("FlatNumber")
                        .HasColumnType("int")
                        .HasColumnName("FLAT_NUMBER");

                    b.Property<DateTime>("InitiationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("INITIATION_DATE");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LAST_NAME");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MIDDLE_NAME");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PHOTO");

                    b.Property<string>("Pincode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PINCODE");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("STATE");

                    b.ToTable("getUnpaidDetailDTO");
                });

            modelBuilder.Entity("Backend.Model.Devotee", b =>
                {
                    b.Property<string>("DevoteeId")
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("DevoteeID");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("AREA");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CITY");

                    b.Property<DateTime?>("Creationtime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CREATIONTIME")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Emailid")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("EMAILID");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("FIRST_NAME");

                    b.Property<int>("FlatNumber")
                        .HasColumnType("int")
                        .HasColumnName("FLAT_NUMBER");

                    b.Property<DateTime>("InitiationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("INITIATION_DATE")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("LAST_NAME");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("MIDDLE_NAME");

                    b.Property<DateTime>("Modificationtime")
                        .HasColumnType("datetime")
                        .HasColumnName("MODIFICATIONTIME");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PHOTO");

                    b.Property<string>("Pincode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("PINCODE");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("STATE");

                    b.HasKey("DevoteeId");

                    b.ToTable("Devotees");
                });

            modelBuilder.Entity("Backend.Model.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("Creationtime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CREATIONTIME")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DevoteeId")
                        .IsRequired()
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("DevoteeID");

                    b.Property<DateTime>("Modificationtime")
                        .HasColumnType("datetime")
                        .HasColumnName("MODIFICATIONTIME");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("DevoteeId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Backend.Model.Payment", b =>
                {
                    b.HasOne("Backend.Model.Devotee", "Devotee")
                        .WithMany("Payments")
                        .HasForeignKey("DevoteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Payments__MODIFI__7D439ABD");

                    b.Navigation("Devotee");
                });

            modelBuilder.Entity("Backend.Model.Devotee", b =>
                {
                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
